// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package userpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UserCRUDClient is the client API for UserCRUD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCRUDClient interface {
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserRes, error)
	ReadUser(ctx context.Context, in *ReadUserReq, opts ...grpc.CallOption) (*ReadUserRes, error)
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserRes, error)
	DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserRes, error)
	ListUsers(ctx context.Context, in *ListUsersReq, opts ...grpc.CallOption) (UserCRUD_ListUsersClient, error)
}

type userCRUDClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCRUDClient(cc grpc.ClientConnInterface) UserCRUDClient {
	return &userCRUDClient{cc}
}

var userCRUDCreateUserStreamDesc = &grpc.StreamDesc{
	StreamName: "CreateUser",
}

func (c *userCRUDClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserRes, error) {
	out := new(CreateUserRes)
	err := c.cc.Invoke(ctx, "/user.UserCRUD/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var userCRUDReadUserStreamDesc = &grpc.StreamDesc{
	StreamName: "ReadUser",
}

func (c *userCRUDClient) ReadUser(ctx context.Context, in *ReadUserReq, opts ...grpc.CallOption) (*ReadUserRes, error) {
	out := new(ReadUserRes)
	err := c.cc.Invoke(ctx, "/user.UserCRUD/ReadUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var userCRUDUpdateUserStreamDesc = &grpc.StreamDesc{
	StreamName: "UpdateUser",
}

func (c *userCRUDClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserRes, error) {
	out := new(UpdateUserRes)
	err := c.cc.Invoke(ctx, "/user.UserCRUD/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var userCRUDDeleteUserStreamDesc = &grpc.StreamDesc{
	StreamName: "DeleteUser",
}

func (c *userCRUDClient) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserRes, error) {
	out := new(DeleteUserRes)
	err := c.cc.Invoke(ctx, "/user.UserCRUD/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var userCRUDListUsersStreamDesc = &grpc.StreamDesc{
	StreamName:    "ListUsers",
	ServerStreams: true,
}

func (c *userCRUDClient) ListUsers(ctx context.Context, in *ListUsersReq, opts ...grpc.CallOption) (UserCRUD_ListUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, userCRUDListUsersStreamDesc, "/user.UserCRUD/ListUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &userCRUDListUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserCRUD_ListUsersClient interface {
	Recv() (*ListUsersRes, error)
	grpc.ClientStream
}

type userCRUDListUsersClient struct {
	grpc.ClientStream
}

func (x *userCRUDListUsersClient) Recv() (*ListUsersRes, error) {
	m := new(ListUsersRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserCRUDService is the service API for UserCRUD service.
// Fields should be assigned to their respective handler implementations only before
// RegisterUserCRUDService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type UserCRUDService struct {
	CreateUser func(context.Context, *CreateUserReq) (*CreateUserRes, error)
	ReadUser   func(context.Context, *ReadUserReq) (*ReadUserRes, error)
	UpdateUser func(context.Context, *UpdateUserReq) (*UpdateUserRes, error)
	DeleteUser func(context.Context, *DeleteUserReq) (*DeleteUserRes, error)
	ListUsers  func(*ListUsersReq, UserCRUD_ListUsersServer) error
}

func (s *UserCRUDService) createUser(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/user.UserCRUD/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *UserCRUDService) readUser(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.ReadUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/user.UserCRUD/ReadUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ReadUser(ctx, req.(*ReadUserReq))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *UserCRUDService) updateUser(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/user.UserCRUD/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *UserCRUDService) deleteUser(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/user.UserCRUD/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteUser(ctx, req.(*DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *UserCRUDService) listUsers(_ interface{}, stream grpc.ServerStream) error {
	m := new(ListUsersReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return s.ListUsers(m, &userCRUDListUsersServer{stream})
}

type UserCRUD_ListUsersServer interface {
	Send(*ListUsersRes) error
	grpc.ServerStream
}

type userCRUDListUsersServer struct {
	grpc.ServerStream
}

func (x *userCRUDListUsersServer) Send(m *ListUsersRes) error {
	return x.ServerStream.SendMsg(m)
}

// RegisterUserCRUDService registers a service implementation with a gRPC server.
func RegisterUserCRUDService(s grpc.ServiceRegistrar, srv *UserCRUDService) {
	srvCopy := *srv
	if srvCopy.CreateUser == nil {
		srvCopy.CreateUser = func(context.Context, *CreateUserReq) (*CreateUserRes, error) {
			return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
		}
	}
	if srvCopy.ReadUser == nil {
		srvCopy.ReadUser = func(context.Context, *ReadUserReq) (*ReadUserRes, error) {
			return nil, status.Errorf(codes.Unimplemented, "method ReadUser not implemented")
		}
	}
	if srvCopy.UpdateUser == nil {
		srvCopy.UpdateUser = func(context.Context, *UpdateUserReq) (*UpdateUserRes, error) {
			return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
		}
	}
	if srvCopy.DeleteUser == nil {
		srvCopy.DeleteUser = func(context.Context, *DeleteUserReq) (*DeleteUserRes, error) {
			return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
		}
	}
	if srvCopy.ListUsers == nil {
		srvCopy.ListUsers = func(*ListUsersReq, UserCRUD_ListUsersServer) error {
			return status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "user.UserCRUD",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "CreateUser",
				Handler:    srvCopy.createUser,
			},
			{
				MethodName: "ReadUser",
				Handler:    srvCopy.readUser,
			},
			{
				MethodName: "UpdateUser",
				Handler:    srvCopy.updateUser,
			},
			{
				MethodName: "DeleteUser",
				Handler:    srvCopy.deleteUser,
			},
		},
		Streams: []grpc.StreamDesc{
			{
				StreamName:    "ListUsers",
				Handler:       srvCopy.listUsers,
				ServerStreams: true,
			},
		},
		Metadata: "user/proto/user.proto",
	}

	s.RegisterService(&sd, nil)
}
