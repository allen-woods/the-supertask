version: '3'

services:
  # Our golang GraphQL server that sends gRPC requests.
  api:
    container_name: api_svc
    build:
      context: ./
      dockerfile: ./api/Dockerfile
    depends_on:
      - redis
      - vc_redis
      - user
    restart: unless-stopped
    ports:
      - target: 9000
        published: 80
        protocol: tcp
        mode: host
    networks:
      - backend

  # The MongoDB instance that holds our databases.
  mongo:
    container_name: mongo_svc
    build:
      context: ./
      dockerfile: ./mongo/Dockerfile
    restart: unless-stopped
    ports:
      - '27017'
    expose:
      - '27017'
    networks:
      - backend
    # A volume to persist our NoSQL database
    volumes:
      - persist_mongo:/data/db:rw
  vc_mongo:
    image: mongo:bionic
    volumes:
      - persist_mongo:/data/db:rw

  # The Redis instance that holds our user IDs (UUID v4).
  redis:
    container_name: redis_svc
    build:
      context: ./
      dockerfile: ./redis/Dockerfile
    restart: unless-stopped
    # These settings allow tcp-backlog in
    # ./redis/redis.conf to not be capped.
    sysctls:
      net.core.somaxconn: 1024
      net.ipv4.tcp_syncookies: 0
    # This setting is required to disable THP support
    # (for now).
    privileged: true
    ports:
      - '6379'
    expose:
      - '6379'
    networks:
      - backend
    # A volume for persisting our database.
    volumes:
      - persist_redis:/data:rw

  vc_redis:
    image: redis:alpine
    volumes:
      - persist_redis:/data:rw

  user:
    container_name: user_svc
    build:
      context: ./
      dockerfile: ./services/user/Dockerfile
    depends_on:
      - mongo
      - vc_mongo
      - redis
      - vc_redis
    restart: unless-stopped
    ports:
      - '50051'
    expose:
      - '50051'
    networks:
      - backend
networks:
  # frontend:
  backend:
volumes:
  persist_mongo:
  persist_redis:
